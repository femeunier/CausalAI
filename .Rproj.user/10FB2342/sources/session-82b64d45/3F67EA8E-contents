rm(list = ls())

library(dplyr)
library(lubridate)
library(ggplot2)
library(tidyr)
library(tseries)
library(vars)
library(xgboost)
library(caret)
library(tidyverse)
library(shapr)
library(yardstick)
library(reshape2)
library(doParallel)

###############################################################
# Settings

cmodel <- "CLM6.0"

grid <- expand.grid(
  nrounds = c(300, 1200),
  eta = c(0.02, 0.5),
  max_depth = c(5, 15),
  gamma = 0,
  colsample_bytree = 1,
  min_child_weight = 1,
  subsample = 1)

climate_vars <- c("tmp","tmin","tmax","dswrf","VPD",
                  "CO2","pre","top.sml")

if (requireNamespace("future", quietly = TRUE)) {
  future::plan("multisession", workers = 16)
}

group_ts <- list(
  S1 = c("tmp","tmin","tmax","VPD"),
  S2 = c("dswrf"),
  S3 = c("pre","top.sml"),
  S4 = c("CO2"))

group_order <- unlist(group_ts, use.names = FALSE)

control <- trainControl(method = "cv", number = 5)


###############################################################
# Load data

CO2 <- read.table("./data/global_co2_ann_1700_2024.txt") %>%
  rename(year = V1,
         CO2 = V2)

# scp /home/femeunier/Documents/projects/Congo.vs.Amazon/data/global_co2_ann_1700_2024.txt hpc:/kyukon/data/gent/vo/000/gvo00074/felicien/R/data/

monthly_df <- expand.grid(
  month = 1:12,
  year = CO2$year) %>%
  arrange(year, month) %>%
  mutate(year_decimal = year + (month - 0.5) / 12)

monthly_df$CO2 <- approx(
  x = CO2$year,
  y = CO2$CO2,
  xout = monthly_df$year_decimal)$y

climate <- readRDS(paste0("./data/grid.",
                          cmodel,".JRA.v13.RDS")) %>%
  mutate(lat = round(lat,digits = 3),
         lon = round(lon,digits = 3)) %>%
  left_join(monthly_df,
            by = c("year","month")) %>%
  ungroup()

msl.file <- paste0("./outputs/MSL.grid.",cmodel,".RDS")
msl.ts <- readRDS(msl.file) %>%
  mutate(year = year(time),
         month = month(time)) %>%
  dplyr::select(lon,lat,year,month,
                top.sml,tot.sml) %>%
  mutate(lat = round(lat,digits = 3),
         lon = round(lon,digits = 3)) %>%
  ungroup() %>%
  mutate(lon = case_when(lon > 180 ~ lon - 360,
                         TRUE ~ lon))

CC <- readRDS(paste0("./outputs/Trendy.",
                     cmodel,
                     ".S2.CC.pantropical.v13.RDS")) %>%
  dplyr::select(lon,lat,year,month,gpp) %>%
  mutate(lat = round(lat,digits = 3),
         lon = round(lon,digits = 3)) %>%
  ungroup()

# Merge all datasets
all <- climate %>%
  left_join(msl.ts,
            by = c("lon","lat","year","month")) %>%
  left_join(CC %>%
              mutate(gpp = as.numeric(gpp)*86400*365),
            by = c("lon","lat","year","month")) %>%
  dplyr::select(lon,lat,year,month,
                tmp,tmin,tmax,
                dswrf,VPD,CO2,pre,
                top.sml,tot.sml,
                gpp) %>%
  mutate(lon_lat = paste0(lon,"_",lat))

all.select <- all %>%
  filter(abs(lat) < 23.5) %>%
  filter(year >= 1981) %>%
  na.omit()

lons_lats <- all.select %>%
  pull(lon_lat) %>%
  unique()

##################################################################
# Timer
hour_start <- Sys.time()

scale_z <- function(df, mu, sdv) {
  as.data.frame(mapply(function(z, m, s) (z - m) / s, df, mu, sdv))
}

# ################################################################
# XGBoost

x_var <- climate_vars
y_var <- "gpp"

df.QoF <- data.frame()
all.X.test <- data.frame()
all.test <- data.frame()
all.SHAP <- data.frame()

for (ilon.lat in seq(1,length(lons_lats))){

  clon.lat <- lons_lats[ilon.lat]
  print(ilon.lat/length(lons_lats))

  df <- all.select %>%
    filter(lon_lat == clon.lat) %>%
    dplyr::select(-any_of(c("lon","lat","lon_lat",
                            "year","month")))

  mu <- sapply(df, mean) ; mu[y_var] <- 0
  sdv <- sapply(df, sd) ; sdv[y_var] <- 1

  df.scaled <- scale_z(df, mu, sdv)

  smp_size <- floor(0.8 * nrow(df.scaled))
  train_ind <- sample(seq_len(nrow(df.scaled)),
                      size = smp_size)

  x_train <- as.matrix(df.scaled[train_ind, x_var])
  x_train <- x_train[, group_order, drop = FALSE]
  y_train <- df.scaled[train_ind, ] %>% pull(y_var)

  x_test <- as.matrix(df.scaled[-train_ind, x_var])
  x_test  <- x_test [, group_order, drop = FALSE]
  y_test <- df.scaled[-train_ind, ] %>% pull(y_var)

  model <- tryCatch(train(
    x = x_train,
    y = y_train,
    method = "xgbTree",
    trControl = control,
    tuneGrid = grid,
    metric = "RMSE",
    verbosity = 0,
    nthread = 16),
    error = function(e) NULL)

  if (is.null(model)){
    next()
  }

  pred_y <- predict(model, x_test)
  RMSE <- caret::RMSE(pred_y, y_test)
  RSQ <- rsq_vec(as.numeric(pred_y), y_test)
  rBias <- mean((y_test - pred_y)/y_test,
                na.rm = T*100)

  df.QoF <- bind_rows(df.QoF,
                      data.frame(lon_lat = clon.lat,
                                 RMSE,
                                 Rsq = RSQ,
                                 rBias,
                                 mean.y = mean(df[[y_var]],na.rm = TRUE),
                                 sd.y = sd(df[[y_var]],na.rm = TRUE),
                                 model = cmodel))

  all.test <- bind_rows(all.test,
                        data.frame(pred = pred_y,
                                   obs = y_test,
                                   model = cmodel,
                                   lon_lat = clon.lat))

  explainer <- tryCatch(
    explain(
      model     = model$finalModel,
      x_explain = x_test,
      x         = x_train,
      approach  = "timeseries",
      phi0      = mean(y_train),
      # group     = group_ts,
      iterative = FALSE,
      n_MC_samples = 2000,
      extra_computation_args = list(
        timeseries.bounds = c(-5, 5),   # optional for z-scores
        timeseries.fixed_sigma = 2
      )
    ),error = function(e) { message(e); NULL })

  if (is.null(explainer)){
    next()
  }

  shap_df <- explainer$shapley_values_est %>%
    as.data.frame() %>%
    mutate(row_id = row_number()) %>%
    pivot_longer(-row_id,
                 names_to = "feature",
                 values_to = "shap_value") %>%
    filter(!(feature %in% c("explain_id","none")))

  all.SHAP <- bind_rows(all.SHAP,
                        shap_df %>%
                          mutate(model = cmodel,
                                 lon_lat = clon.lat))

  all.X.test <- bind_rows(all.X.test,
                          as.data.frame(x_test) %>%
                            mutate(model = cmodel,
                                   lon_lat = clon.lat))


  elapsed <- as.numeric(difftime(Sys.time(), hour_start, units = "secs"))

  if (elapsed >= 600) {
    saveRDS(df.QoF,
            paste0("./outputs/QoF.",cmodel,".RDS"))
    saveRDS(all.test,
            paste0("./outputs/All.test.XGBoosts.",cmodel,".RDS"))
    saveRDS(all.SHAP,
            paste0("./outputs/All.SHAP.",cmodel,".RDS"))
    saveRDS(all.X.test,
            paste0("./outputs/All.X.test.",cmodel,".RDS"))

    hour_start <- Sys.time()

  }
}

# scp /home/femeunier/Documents/projects/CausalAI/scripts/XGBoost.grid.R hpc:/kyukon/data/gent/vo/000/gvo00074/felicien/R/

